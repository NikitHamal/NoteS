// Generated by view binder compiler. Do not edit!
package com.notex.create.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.core.widget.NestedScrollView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.appbar.AppBarLayout;
import com.google.android.material.appbar.MaterialToolbar;
import com.notex.create.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class SettingsBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final AppBarLayout appBarLayout;

  @NonNull
  public final ImageView backButton;

  @NonNull
  public final LinearLayout clearAllData;

  @NonNull
  public final LinearLayout contentContainer;

  @NonNull
  public final LinearLayout exportAllNotes;

  @NonNull
  public final NestedScrollView nestedScrollView;

  @NonNull
  public final MaterialToolbar toolbar;

  @NonNull
  public final TextView toolbarTitle;

  private SettingsBinding(@NonNull CoordinatorLayout rootView, @NonNull AppBarLayout appBarLayout,
      @NonNull ImageView backButton, @NonNull LinearLayout clearAllData,
      @NonNull LinearLayout contentContainer, @NonNull LinearLayout exportAllNotes,
      @NonNull NestedScrollView nestedScrollView, @NonNull MaterialToolbar toolbar,
      @NonNull TextView toolbarTitle) {
    this.rootView = rootView;
    this.appBarLayout = appBarLayout;
    this.backButton = backButton;
    this.clearAllData = clearAllData;
    this.contentContainer = contentContainer;
    this.exportAllNotes = exportAllNotes;
    this.nestedScrollView = nestedScrollView;
    this.toolbar = toolbar;
    this.toolbarTitle = toolbarTitle;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static SettingsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static SettingsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.settings, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static SettingsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.app_bar_layout;
      AppBarLayout appBarLayout = ViewBindings.findChildViewById(rootView, id);
      if (appBarLayout == null) {
        break missingId;
      }

      id = R.id.back_button;
      ImageView backButton = ViewBindings.findChildViewById(rootView, id);
      if (backButton == null) {
        break missingId;
      }

      id = R.id.clear_all_data;
      LinearLayout clearAllData = ViewBindings.findChildViewById(rootView, id);
      if (clearAllData == null) {
        break missingId;
      }

      id = R.id.content_container;
      LinearLayout contentContainer = ViewBindings.findChildViewById(rootView, id);
      if (contentContainer == null) {
        break missingId;
      }

      id = R.id.export_all_notes;
      LinearLayout exportAllNotes = ViewBindings.findChildViewById(rootView, id);
      if (exportAllNotes == null) {
        break missingId;
      }

      id = R.id.nested_scroll_view;
      NestedScrollView nestedScrollView = ViewBindings.findChildViewById(rootView, id);
      if (nestedScrollView == null) {
        break missingId;
      }

      id = R.id.toolbar;
      MaterialToolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      id = R.id.toolbar_title;
      TextView toolbarTitle = ViewBindings.findChildViewById(rootView, id);
      if (toolbarTitle == null) {
        break missingId;
      }

      return new SettingsBinding((CoordinatorLayout) rootView, appBarLayout, backButton,
          clearAllData, contentContainer, exportAllNotes, nestedScrollView, toolbar, toolbarTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
