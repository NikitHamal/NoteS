// Generated by view binder compiler. Do not edit!
package com.notex.create.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.core.widget.NestedScrollView;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.appbar.AppBarLayout;
import com.google.android.material.appbar.MaterialToolbar;
import com.google.android.material.chip.Chip;
import com.notex.create.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ViewBinding implements androidx.viewbinding.ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final AppBarLayout appBarLayout;

  @NonNull
  public final ImageView backButton;

  @NonNull
  public final LinearLayout contentContainer;

  @NonNull
  public final ImageView editButton;

  @NonNull
  public final NestedScrollView nestedScrollView;

  @NonNull
  public final TextView noteContent;

  @NonNull
  public final TextView noteTitle;

  @NonNull
  public final Chip notebookChip;

  @NonNull
  public final MaterialToolbar toolbar;

  @NonNull
  public final TextView viewTitle;

  private ViewBinding(@NonNull CoordinatorLayout rootView, @NonNull AppBarLayout appBarLayout,
      @NonNull ImageView backButton, @NonNull LinearLayout contentContainer,
      @NonNull ImageView editButton, @NonNull NestedScrollView nestedScrollView,
      @NonNull TextView noteContent, @NonNull TextView noteTitle, @NonNull Chip notebookChip,
      @NonNull MaterialToolbar toolbar, @NonNull TextView viewTitle) {
    this.rootView = rootView;
    this.appBarLayout = appBarLayout;
    this.backButton = backButton;
    this.contentContainer = contentContainer;
    this.editButton = editButton;
    this.nestedScrollView = nestedScrollView;
    this.noteContent = noteContent;
    this.noteTitle = noteTitle;
    this.notebookChip = notebookChip;
    this.toolbar = toolbar;
    this.viewTitle = viewTitle;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ViewBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ViewBinding inflate(@NonNull LayoutInflater inflater, @Nullable ViewGroup parent,
      boolean attachToParent) {
    View root = inflater.inflate(R.layout.view, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ViewBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.app_bar_layout;
      AppBarLayout appBarLayout = ViewBindings.findChildViewById(rootView, id);
      if (appBarLayout == null) {
        break missingId;
      }

      id = R.id.back_button;
      ImageView backButton = ViewBindings.findChildViewById(rootView, id);
      if (backButton == null) {
        break missingId;
      }

      id = R.id.content_container;
      LinearLayout contentContainer = ViewBindings.findChildViewById(rootView, id);
      if (contentContainer == null) {
        break missingId;
      }

      id = R.id.edit_button;
      ImageView editButton = ViewBindings.findChildViewById(rootView, id);
      if (editButton == null) {
        break missingId;
      }

      id = R.id.nested_scroll_view;
      NestedScrollView nestedScrollView = ViewBindings.findChildViewById(rootView, id);
      if (nestedScrollView == null) {
        break missingId;
      }

      id = R.id.note_content;
      TextView noteContent = ViewBindings.findChildViewById(rootView, id);
      if (noteContent == null) {
        break missingId;
      }

      id = R.id.note_title;
      TextView noteTitle = ViewBindings.findChildViewById(rootView, id);
      if (noteTitle == null) {
        break missingId;
      }

      id = R.id.notebook_chip;
      Chip notebookChip = ViewBindings.findChildViewById(rootView, id);
      if (notebookChip == null) {
        break missingId;
      }

      id = R.id.toolbar;
      MaterialToolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      id = R.id.view_title;
      TextView viewTitle = ViewBindings.findChildViewById(rootView, id);
      if (viewTitle == null) {
        break missingId;
      }

      return new ViewBinding((CoordinatorLayout) rootView, appBarLayout, backButton,
          contentContainer, editButton, nestedScrollView, noteContent, noteTitle, notebookChip,
          toolbar, viewTitle);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
