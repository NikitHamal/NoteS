// Generated by view binder compiler. Do not edit!
package com.notex.create.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.cardview.widget.CardView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.button.MaterialButton;
import com.notex.create.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class CusBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final CardView cardview1;

  @NonNull
  public final LinearLayout linear1;

  @NonNull
  public final MaterialButton optionDelete;

  @NonNull
  public final MaterialButton optionEdit;

  @NonNull
  public final MaterialButton optionExport;

  @NonNull
  public final MaterialButton optionRename;

  @NonNull
  public final MaterialButton optionShare;

  private CusBinding(@NonNull LinearLayout rootView, @NonNull CardView cardview1,
      @NonNull LinearLayout linear1, @NonNull MaterialButton optionDelete,
      @NonNull MaterialButton optionEdit, @NonNull MaterialButton optionExport,
      @NonNull MaterialButton optionRename, @NonNull MaterialButton optionShare) {
    this.rootView = rootView;
    this.cardview1 = cardview1;
    this.linear1 = linear1;
    this.optionDelete = optionDelete;
    this.optionEdit = optionEdit;
    this.optionExport = optionExport;
    this.optionRename = optionRename;
    this.optionShare = optionShare;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static CusBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static CusBinding inflate(@NonNull LayoutInflater inflater, @Nullable ViewGroup parent,
      boolean attachToParent) {
    View root = inflater.inflate(R.layout.cus, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static CusBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.cardview1;
      CardView cardview1 = ViewBindings.findChildViewById(rootView, id);
      if (cardview1 == null) {
        break missingId;
      }

      id = R.id.linear1;
      LinearLayout linear1 = ViewBindings.findChildViewById(rootView, id);
      if (linear1 == null) {
        break missingId;
      }

      id = R.id.option_delete;
      MaterialButton optionDelete = ViewBindings.findChildViewById(rootView, id);
      if (optionDelete == null) {
        break missingId;
      }

      id = R.id.option_edit;
      MaterialButton optionEdit = ViewBindings.findChildViewById(rootView, id);
      if (optionEdit == null) {
        break missingId;
      }

      id = R.id.option_export;
      MaterialButton optionExport = ViewBindings.findChildViewById(rootView, id);
      if (optionExport == null) {
        break missingId;
      }

      id = R.id.option_rename;
      MaterialButton optionRename = ViewBindings.findChildViewById(rootView, id);
      if (optionRename == null) {
        break missingId;
      }

      id = R.id.option_share;
      MaterialButton optionShare = ViewBindings.findChildViewById(rootView, id);
      if (optionShare == null) {
        break missingId;
      }

      return new CusBinding((LinearLayout) rootView, cardview1, linear1, optionDelete, optionEdit,
          optionExport, optionRename, optionShare);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
