// Generated by view binder compiler. Do not edit!
package com.notex.create.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.appbar.AppBarLayout;
import com.google.android.material.appbar.MaterialToolbar;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.card.MaterialCardView;
import com.notex.create.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DebugActivityBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final AppBarLayout appBarLayout;

  @NonNull
  public final MaterialButton clearLogsButton;

  @NonNull
  public final MaterialButton copyLogsButton;

  @NonNull
  public final MaterialCardView crashInfoCard;

  @NonNull
  public final TextView crashInfoText;

  @NonNull
  public final MaterialButton exportLogsButton;

  @NonNull
  public final TextView logText;

  @NonNull
  public final MaterialButton restartAppButton;

  @NonNull
  public final TextView systemInfoText;

  @NonNull
  public final MaterialToolbar toolbar;

  private DebugActivityBinding(@NonNull CoordinatorLayout rootView,
      @NonNull AppBarLayout appBarLayout, @NonNull MaterialButton clearLogsButton,
      @NonNull MaterialButton copyLogsButton, @NonNull MaterialCardView crashInfoCard,
      @NonNull TextView crashInfoText, @NonNull MaterialButton exportLogsButton,
      @NonNull TextView logText, @NonNull MaterialButton restartAppButton,
      @NonNull TextView systemInfoText, @NonNull MaterialToolbar toolbar) {
    this.rootView = rootView;
    this.appBarLayout = appBarLayout;
    this.clearLogsButton = clearLogsButton;
    this.copyLogsButton = copyLogsButton;
    this.crashInfoCard = crashInfoCard;
    this.crashInfoText = crashInfoText;
    this.exportLogsButton = exportLogsButton;
    this.logText = logText;
    this.restartAppButton = restartAppButton;
    this.systemInfoText = systemInfoText;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DebugActivityBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DebugActivityBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.debug_activity, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DebugActivityBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.app_bar_layout;
      AppBarLayout appBarLayout = ViewBindings.findChildViewById(rootView, id);
      if (appBarLayout == null) {
        break missingId;
      }

      id = R.id.clear_logs_button;
      MaterialButton clearLogsButton = ViewBindings.findChildViewById(rootView, id);
      if (clearLogsButton == null) {
        break missingId;
      }

      id = R.id.copy_logs_button;
      MaterialButton copyLogsButton = ViewBindings.findChildViewById(rootView, id);
      if (copyLogsButton == null) {
        break missingId;
      }

      id = R.id.crash_info_card;
      MaterialCardView crashInfoCard = ViewBindings.findChildViewById(rootView, id);
      if (crashInfoCard == null) {
        break missingId;
      }

      id = R.id.crash_info_text;
      TextView crashInfoText = ViewBindings.findChildViewById(rootView, id);
      if (crashInfoText == null) {
        break missingId;
      }

      id = R.id.export_logs_button;
      MaterialButton exportLogsButton = ViewBindings.findChildViewById(rootView, id);
      if (exportLogsButton == null) {
        break missingId;
      }

      id = R.id.log_text;
      TextView logText = ViewBindings.findChildViewById(rootView, id);
      if (logText == null) {
        break missingId;
      }

      id = R.id.restart_app_button;
      MaterialButton restartAppButton = ViewBindings.findChildViewById(rootView, id);
      if (restartAppButton == null) {
        break missingId;
      }

      id = R.id.system_info_text;
      TextView systemInfoText = ViewBindings.findChildViewById(rootView, id);
      if (systemInfoText == null) {
        break missingId;
      }

      id = R.id.toolbar;
      MaterialToolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      return new DebugActivityBinding((CoordinatorLayout) rootView, appBarLayout, clearLogsButton,
          copyLogsButton, crashInfoCard, crashInfoText, exportLogsButton, logText, restartAppButton,
          systemInfoText, toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
